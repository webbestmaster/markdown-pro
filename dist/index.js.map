{"version":3,"file":"index.js","mappings":"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","sources":["webpack://markdown-pro/webpack/bootstrap","webpack://markdown-pro/./www/library/src/markdown-const.ts","webpack://markdown-pro/webpack/runtime/define property getters","webpack://markdown-pro/webpack/runtime/hasOwnProperty shorthand","webpack://markdown-pro/webpack/runtime/make namespace object","webpack://markdown-pro/./www/library/src/render/render-const.ts","webpack://markdown-pro/./www/library/src/parser/util/string.ts","webpack://markdown-pro/./www/library/src/parser/util/navigation.ts","webpack://markdown-pro/./www/library/src/parser/parser-selector.ts","webpack://markdown-pro/./www/library/src/parser/footnote/footnote-const.ts","webpack://markdown-pro/./www/library/src/parser/footnote/footnote-helper.ts","webpack://markdown-pro/./www/library/src/parser/footnote/footnote.ts","webpack://markdown-pro/./www/library/src/parser/util/is-tag.ts","webpack://markdown-pro/./www/library/src/parser/util/is.ts","webpack://markdown-pro/./www/library/src/render/render-util.ts","webpack://markdown-pro/./www/library/src/render/render-link.ts","webpack://markdown-pro/./www/library/src/render/render-pair-tag.ts","webpack://markdown-pro/./www/library/src/render/render-helper.ts","webpack://markdown-pro/./www/library/src/render/render-table/render-table-const.ts","webpack://markdown-pro/./www/library/src/render/render-table/render-table-helper.ts","webpack://markdown-pro/./www/library/src/render/render-table/render-table.ts","webpack://markdown-pro/./www/library/src/render/render.ts","webpack://markdown-pro/./www/library/src/markdown.ts","webpack://markdown-pro/./www/library/src/parser/parse-line.ts","webpack://markdown-pro/./www/library/src/parser/util/variable.ts","webpack://markdown-pro/./www/library/src/helper.ts","webpack://markdown-pro/./www/library/library.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","import {MarkdownConfigType} from '../library';\n\nexport enum ThemeNameEnum {\n    auto = 'auto',\n    dark = 'dark',\n    light = 'light',\n}\n\nexport const defaultMarkdownConfig: MarkdownConfigType = {\n    codeHighlight: (langName: string, code: string): string => code,\n    parseLink: true,\n    themeName: ThemeNameEnum.auto,\n    useLineBreak: false,\n    useWrapper: true,\n    wrapperClassName: 'md-pro',\n};\n\nexport const themeClassNameMap: Record<ThemeNameEnum, string> = {\n    [ThemeNameEnum.auto]: `${defaultMarkdownConfig.wrapperClassName}-theme-${ThemeNameEnum.auto}`,\n    [ThemeNameEnum.dark]: `${defaultMarkdownConfig.wrapperClassName}-theme-${ThemeNameEnum.dark}`,\n    [ThemeNameEnum.light]: `${defaultMarkdownConfig.wrapperClassName}-theme-${ThemeNameEnum.light}`,\n};\n\nexport const mailPrefix = 'mailto:';\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const emptyString = '';\nexport const space = ' ';\nexport const breakLineTag = '<br/>';\n","import {emptyString} from '../../render/render-const';\n\nexport function filterEmptyString(line: string): boolean {\n    return line.trim() !== emptyString;\n}\n\nexport function cleanLine(line: string): string {\n    // eslint-disable-next-line unicorn/prefer-string-replace-all\n    return line.trim().replace(/\\s+/g, ' ');\n}\n\nexport function getIsAllSymbolsEqual(line: string): boolean {\n    // eslint-disable-next-line unicorn/prefer-spread\n    const charList: Array<string> = line.split('');\n\n    const [firstSymbol] = charList;\n\n    if (!firstSymbol) {\n        return true;\n    }\n\n    // eslint-disable-next-line no-loops/no-loops\n    for (const char of charList) {\n        if (char !== firstSymbol) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import {LineDataType} from '../parser-type';\nimport {emptyString} from '../../render/render-const';\n\n// eslint-disable-next-line complexity\nexport function searchSiblingItem(\n    lineData: LineDataType,\n    lineDataList: Array<LineDataType>,\n    direction: number\n): LineDataType | null {\n    const index = lineDataList.indexOf(lineData);\n\n    if (index === -1) {\n        // console.error('lineDataList should contain lineData');\n        return null;\n    }\n\n    const siblingIndex = index + direction;\n\n    const siblingItem = siblingIndex in lineDataList ? lineDataList[siblingIndex] : null;\n\n    if (!siblingItem) {\n        return null;\n    }\n\n    if (siblingItem.trimmedLine === emptyString) {\n        const newDirection = direction + (direction >= 0 ? 1 : -1);\n\n        return searchSiblingItem(lineData, lineDataList, newDirection);\n    }\n\n    return siblingItem;\n}\n\nexport function getIsEdgeLine(lineData: LineDataType, lineDataList: Array<LineDataType>, direction: number): boolean {\n    const {selector} = lineData;\n    const foundItem = searchSiblingItem(lineData, lineDataList, direction);\n\n    return !foundItem || foundItem.selector !== selector;\n}\n\nexport function getParent(lineData: LineDataType, lineDataList: Array<LineDataType>): LineDataType | null {\n    const linaDataListLength = lineDataList.length;\n\n    // eslint-disable-next-line no-loops/no-loops\n    for (let lineDataIndex = linaDataListLength - 1; lineDataIndex >= 0; lineDataIndex -= 1) {\n        const lineDataCandidate = lineDataList[lineDataIndex];\n\n        if (lineDataCandidate.spaceCount < lineData.spaceCount) {\n            return lineDataCandidate;\n        }\n    }\n\n    // console.error('Parent not found');\n\n    return null;\n}\n","import {\n    OlParseDataType,\n    OlTypeBigAlphabetType,\n    OlTypeBigRomanNumberType,\n    OlTypeNumericType,\n    OlTypeSmallAlphabetType,\n    OlTypeSmallRomanNumberType,\n    PairTagSelectorType,\n    SelectorOlBigAlphabetItemType,\n    SelectorOlBigRomanNumberItemType,\n    SelectorOlNumericItemType,\n    SelectorOlSmallAlphabetItemType,\n    SelectorOlSmallRomanNumberItemType,\n    SelectorType,\n} from './parser-type';\n\nexport const selectorHeaderList: Array<SelectorType> = ['# ', '## ', '### ', '#### ', '##### ', '###### '];\n// export const selectorHeaderList: Array<SelectorHeaderType> = ['# ', '## ', '### ', '#### ', '##### ', '###### '];\nexport const selectorBlockquoteList: Array<SelectorType> = ['> '];\n// export const selectorBlockquoteList: Array<SelectorBlockquoteType> = ['> '];\nexport const selectorLineList: Array<SelectorType> = ['---', '***', '___'];\n// export const selectorLineList: Array<SelectorLineType> = ['---', '***', '___'];\nexport const selectorTableList: Array<SelectorType> = ['|'];\n// export const selectorTableList: Array<SelectorTableType> = ['|'];\nexport const selectorCodeList: Array<SelectorType> = ['```'];\n// export const selectorCodeList: Array<SelectorCodeType> = ['```'];\n\nexport const selectorULItemList: Array<SelectorType> = ['+ ', '- ', '* '];\n// export const selectorULItemList: Array<SelectorUlItemType> = ['+ ', '- ', '* '];\n\nexport const olNumericItemSelector: SelectorOlNumericItemType = '0. ';\nexport const olNumericItemRegExp = /^\\d+\\.\\s/;\nexport const olNumericType: OlTypeNumericType = '1';\n\nexport const olBigRomanNumberItemSelector: SelectorOlBigRomanNumberItemType = 'I. ';\nexport const olBigRomanNumberItemRegExp = /^[CDILMVX]+\\.\\s/;\nexport const olBigRomanNumberType: OlTypeBigRomanNumberType = 'I';\n\nexport const olSmallRomanNumberItemSelector: SelectorOlSmallRomanNumberItemType = 'i. ';\nexport const olSmallRomanNumberItemRegExp = /^[cdilmvx]+\\.\\s/;\nexport const olSmallRomanNumberType: OlTypeSmallRomanNumberType = 'i';\n\nexport const olBigAlphabetItemSelector: SelectorOlBigAlphabetItemType = 'A. ';\nexport const olBigAlphabetItemRegExp = /^[A-Z]+\\.\\s/;\nexport const olBigAlphabetType: OlTypeBigAlphabetType = 'A';\n\nexport const olSmallAlphabetItemSelector: SelectorOlSmallAlphabetItemType = 'a. ';\nexport const olSmallAlphabetItemRegExp = /^[a-z]+\\.\\s/;\nexport const olSmallAlphabetType: OlTypeSmallAlphabetType = 'a';\n\nexport const oLParseDataList: Array<OlParseDataType> = [\n    {\n        olAttributeType: olNumericType,\n        regExpSearchSelector: olNumericItemRegExp,\n        selector: olNumericItemSelector,\n    },\n    {\n        olAttributeType: olBigRomanNumberType,\n        regExpSearchSelector: olBigRomanNumberItemRegExp,\n        selector: olBigRomanNumberItemSelector,\n    },\n    {\n        olAttributeType: olSmallRomanNumberType,\n        regExpSearchSelector: olSmallRomanNumberItemRegExp,\n        selector: olSmallRomanNumberItemSelector,\n    },\n    {\n        olAttributeType: olBigAlphabetType,\n        regExpSearchSelector: olBigAlphabetItemRegExp,\n        selector: olBigAlphabetItemSelector,\n    },\n    {\n        olAttributeType: olSmallAlphabetType,\n        regExpSearchSelector: olSmallAlphabetItemRegExp,\n        selector: olSmallAlphabetItemSelector,\n    },\n];\n\nexport const selectorList: Array<SelectorType> = [\n    // ...selectorLineList,\n    ...selectorHeaderList,\n    ...selectorULItemList,\n    ...selectorTableList,\n    ...selectorCodeList,\n    ...selectorBlockquoteList,\n].sort((itemA: SelectorType, itemB: SelectorType): number => itemB.length - itemA.length);\n\nconst pairTagSelectorBold: PairTagSelectorType = {\n    closeTag: '</b>',\n    equal: /\\*+/,\n    openTag: '<b>',\n    selector: '**',\n};\nconst pairTagSelectorUnderline: PairTagSelectorType = {\n    closeTag: '</u>',\n    equal: /_+/,\n    openTag: '<u>',\n    selector: '__',\n};\nconst pairTagSelectorStrike: PairTagSelectorType = {\n    closeTag: '</strike>',\n    equal: /~+/,\n    openTag: '<strike>',\n    selector: '~~',\n};\nconst pairTagSelectorItalic1: PairTagSelectorType = {\n    closeTag: '</i>',\n    equal: /_+/,\n    openTag: '<i>',\n    selector: '_',\n};\nconst pairTagSelectorItalic2: PairTagSelectorType = {\n    closeTag: '</i>',\n    equal: /\\*+/,\n    openTag: '<i>',\n    selector: '*',\n};\nconst pairTagSelectorSub: PairTagSelectorType = {\n    closeTag: '</sub>',\n    equal: /~+/,\n    openTag: '<sub>',\n    selector: '~',\n};\nconst pairTagSelectorSup: PairTagSelectorType = {\n    closeTag: '</sup>',\n    equal: /\\^+/,\n    openTag: '<sup>',\n    selector: '^',\n};\nconst pairTagSelectorInlineCode: PairTagSelectorType = {\n    closeTag: '</code>',\n    equal: /`+/,\n    openTag: '<code data-type=\"inline\">',\n    selector: '`',\n};\n\nconst pairTagSelectorBoldAndItalic: PairTagSelectorType = {\n    closeTag: '</i></b>',\n    equal: /\\*+/,\n    openTag: '<b><i>',\n    selector: '***',\n};\n\n// more long selectors should be first\nexport const pairTagSelectorList: Array<PairTagSelectorType> = [\n    pairTagSelectorBoldAndItalic,\n    pairTagSelectorBold,\n    pairTagSelectorUnderline,\n    pairTagSelectorItalic1,\n    pairTagSelectorItalic2,\n    pairTagSelectorStrike,\n    pairTagSelectorSub,\n    pairTagSelectorSup,\n    pairTagSelectorInlineCode,\n];\n","import {FootnoteTypeType} from '../parser-type';\n\nexport const footnoteTypeMap: {[key in FootnoteTypeType]: FootnoteTypeType} = {\n    inline: 'inline',\n    'super': 'super',\n};\n\n// export const footnotePrefix = 'fn-';\n\nexport const findFootnoteMarkGlobalRegExp = /\\S\\[\\^[^\\]]+?]|\\S\\^\\[[^\\]]+?]/g;\n","import {FootnoteType} from '../parser-type';\n\nexport function getIsFootnoteDescription(lineContent: string): boolean {\n    return /^\\[\\^[^\\]]+]:/.test(lineContent);\n}\n\nexport function getFootnoteById(id: string, list: Array<FootnoteType>): FootnoteType | void {\n    return list.find((footnote: FootnoteType): boolean => footnote.id === id);\n}\n\nexport function getFootnoteInlineLineContent(match: string): string {\n    return match.slice(3, -1).trim();\n}\n\n// see findFootnoteMarkGlobalRegExp\nexport function getFootnoteMarkId(match: string): string {\n    // eslint-disable-next-line unicorn/prefer-string-replace-all\n    return getFootnoteInlineLineContent(match).toLowerCase().replace(/\\W/g, ' ').trim().replace(/\\s+/g, '-');\n}\n\nexport function getMdFootnoteContent(footnote: FootnoteType): string {\n    const {inlineLineContent, descriptionLineData} = footnote;\n\n    if (descriptionLineData) {\n        const {lineContent, additionalLineList} = descriptionLineData;\n        const start = lineContent.indexOf(']:') + 2;\n\n        return lineContent.slice(start) + '\\n' + additionalLineList.join('\\n');\n    }\n\n    return inlineLineContent;\n}\n","import {DocumentMetaType, LineDataType, FootnoteType} from '../parser-type';\n\nimport {findFootnoteMarkGlobalRegExp, footnoteTypeMap} from './footnote-const';\nimport {getFootnoteById, getFootnoteInlineLineContent, getFootnoteMarkId} from './footnote-helper';\n\nfunction matchToFootnote(match: string): FootnoteType {\n    const id = getFootnoteMarkId(match);\n    const inlineLineContent = getFootnoteInlineLineContent(match);\n\n    if (match.indexOf('[^') === 1) {\n        return {\n            descriptionLineData: null,\n            id,\n            inlineLineContent,\n            type: footnoteTypeMap.super,\n        };\n    }\n\n    // match.indexOf('^[')\n    return {\n        descriptionLineData: null,\n        id,\n        inlineLineContent,\n        type: footnoteTypeMap.inline,\n    };\n}\n\nexport function getFootnoteList(lineContent: string): Array<FootnoteType> {\n    const matchedList = lineContent.match(findFootnoteMarkGlobalRegExp);\n\n    if (!matchedList) {\n        return [];\n    }\n\n    return matchedList.map(matchToFootnote);\n}\n\nexport function fromToFootnoteList(fromList: Array<FootnoteType>, toList: Array<FootnoteType>): void {\n    // eslint-disable-next-line no-loops/no-loops\n    for (const fromItem of fromList) {\n        const {id, descriptionLineData} = fromItem;\n        const candidateToExtend = toList.find((toItem: FootnoteType): boolean => toItem.id === id);\n\n        if (candidateToExtend) {\n            if (!candidateToExtend.descriptionLineData) {\n                candidateToExtend.descriptionLineData = descriptionLineData;\n            }\n        } else {\n            toList.push(fromItem);\n        }\n    }\n}\n\nexport function addLineData(lineData: LineDataType, toList: Array<FootnoteType>): void {\n    const {lineContent} = lineData;\n    const rawMatchId = lineContent.match(/\\[\\^[^\\]]+?]:/);\n\n    if (!rawMatchId) {\n        return;\n    }\n\n    const [rawId] = rawMatchId;\n\n    const id = rawId.slice(2, -2).trim();\n\n    const footnote = getFootnoteById(id, toList);\n\n    if (footnote) {\n        footnote.descriptionLineData = lineData;\n        return;\n    }\n\n    toList.push({\n        descriptionLineData: lineData,\n        id,\n        inlineLineContent: lineContent,\n        type: footnoteTypeMap.super,\n    });\n}\n\nexport function makeFootnoteSuper(fullLineContent: string, documentMeta: DocumentMetaType): string {\n    return fullLineContent.replace(findFootnoteMarkGlobalRegExp, (match: string): string => {\n        // eslint-disable-next-line unicorn/prefer-spread\n        const charList: Array<string> = match.split('');\n        const [firstLetter] = charList;\n        const {footnoteList} = documentMeta;\n        const id = getFootnoteMarkId(match);\n\n        const footnote = getFootnoteById(id, footnoteList);\n\n        if (!footnote) {\n            return '';\n        }\n\n        return `${firstLetter}<a href=\"#${id}\"><sup>[${footnoteList.indexOf(footnote) + 1}]</sup></a>`;\n    });\n}\n","import {LineDataType} from '../parser-type';\nimport {\n    oLParseDataList,\n    selectorBlockquoteList,\n    selectorCodeList,\n    selectorHeaderList,\n    selectorLineList,\n    selectorTableList,\n    selectorULItemList,\n} from '../parser-selector';\n\nexport function getIsHeader(lineData: LineDataType): boolean {\n    return selectorHeaderList.includes(lineData.selector);\n}\n\nexport function getIsUlItem(lineData: LineDataType): boolean {\n    return selectorULItemList.includes(lineData.selector);\n}\n\nexport function getIsOlItem(lineData: LineDataType): boolean {\n    // eslint-disable-next-line no-loops/no-loops\n    for (const oLParseData of oLParseDataList) {\n        if (oLParseData.selector === lineData.selector) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function getIsLine(lineData: LineDataType): boolean {\n    return selectorLineList.includes(lineData.selector);\n}\n\nexport function getIsTable(lineData: LineDataType): boolean {\n    return selectorTableList.includes(lineData.selector);\n}\n\nexport function getIsCode(lineData: LineDataType): boolean {\n    return selectorCodeList.includes(lineData.selector);\n}\n\nexport function getIsBlockquote(lineData: LineDataType): boolean {\n    return selectorBlockquoteList.includes(lineData.selector);\n}\n\nconst htmlPairTag = /<(\\w+)[^>]*>[\\S\\s]*?<\\/\\1>/;\nconst htmlSingleTag = /<\\w+[^>]*?\\s*\\/>/;\n\nexport function getIsStartWithHtml(lineData: LineDataType): boolean {\n    const {trimmedLine} = lineData;\n\n    return trimmedLine.search(htmlPairTag) === 0 || trimmedLine.search(htmlSingleTag) === 0;\n}\n","export function hasStringNonEmptySymbols(value: unknown): boolean {\n    return typeof value === 'string' && value.trim().length > 0;\n}\n\nexport function hasEmailSymbol(value: string): boolean {\n    return value.includes('@');\n}\n","export type PairNumberArrayType = [number, number];\n\nexport function harArrayOverflow(arrayA: PairNumberArrayType, arrayB: PairNumberArrayType): boolean {\n    const [startA, endA] = arrayA;\n    const [startB, endB] = arrayB;\n\n    return !(endA < startB || endB < startA);\n}\n\nexport function harArrayListOverflow(\n    pairNumberArray: PairNumberArrayType,\n    arrayList: Array<PairNumberArrayType>\n): boolean {\n    // eslint-disable-next-line no-loops/no-loops\n    for (const arrayInList of arrayList) {\n        if (harArrayOverflow(pairNumberArray, arrayInList)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction getMatchIndexList(html: string, regExp: RegExp): Array<PairNumberArrayType> {\n    const resultList: Array<PairNumberArrayType> = [];\n\n    const matchList = html.match(regExp);\n\n    if (!matchList) {\n        return [];\n    }\n\n    let currentIndex = 0;\n\n    // eslint-disable-next-line no-loops/no-loops\n    for (const matchedString of matchList) {\n        const start = html.indexOf(matchedString, currentIndex);\n        const end = start + matchedString.length - 1;\n\n        currentIndex = end;\n\n        resultList.push([start, end]);\n    }\n\n    return resultList;\n}\n\nconst tagSelectorRegExpGlobal = /(<\\w+[\\S\\s]*?>)|(<\\/\\w+?>)|(<\\w+[\\S\\s]*?\\/>)/g;\n\nexport function getTagIndexList(html: string): Array<PairNumberArrayType> {\n    return getMatchIndexList(html, tagSelectorRegExpGlobal);\n}\n\nconst linkSelectorRegExpGlobal = /(<a\\s*?>[\\S\\s]*?<\\/a>)|(<a\\s[\\S\\s]*?>[\\S\\s]*?<\\/a>)|(<a\\s+[\\S\\s]*?\\/>)/g;\n\nexport function getLinkIndexList(html: string): Array<PairNumberArrayType> {\n    return getMatchIndexList(html, linkSelectorRegExpGlobal);\n}\n","import {mailPrefix} from '../markdown-const';\n\nimport {getLinkIndexList, getTagIndexList, harArrayListOverflow, PairNumberArrayType} from './render-util';\n\nconst linkTextRegExpGlobal = /(\\w+:\\/\\/[\\w.]+\\.\\w+[\\w+/]*)/gi;\nconst mailTextRegExpGlobal = /([\\w.-]+@[\\w.]+\\.\\w+[\\w+/]*)/gi;\n\nfunction linkReplacer(html: string, replacer: RegExp, hrefPrefix: string): string {\n    const linkPairIndexList = getLinkIndexList(html);\n    const tagIndexList = getTagIndexList(html);\n\n    return html.replace(replacer, (match: string, brackets1: string, offset: number): string => {\n        const rawLinkIndexArray: PairNumberArrayType = [offset, offset];\n\n        if (harArrayListOverflow(rawLinkIndexArray, tagIndexList)) {\n            return match;\n        }\n\n        if (harArrayListOverflow(rawLinkIndexArray, linkPairIndexList)) {\n            return match;\n        }\n\n        return `<a href=\"${hrefPrefix}${match}\">${match}</a>`;\n    });\n}\n\nexport function makeLinkFromText(html: string): string {\n    return linkReplacer(html, linkTextRegExpGlobal, '');\n}\n\nexport function makeMailFromText(html: string): string {\n    return linkReplacer(html, mailTextRegExpGlobal, mailPrefix);\n}\n","import {PairTagSelectorType} from '../parser/parser-type';\nimport {pairTagSelectorList} from '../parser/parser-selector';\n\nimport {getTagIndexList, harArrayOverflow} from './render-util';\n\n// eslint-disable-next-line complexity, max-statements\nexport function getSelectorIndexList(html: string, pairTagSelector: PairTagSelectorType): Array<number> {\n    const {selector, equal} = pairTagSelector;\n\n    const resultList: Array<number> = [];\n    const selectorLength = selector.length;\n\n    if (selectorLength === 0) {\n        // console.error('Selector is empty string');\n        return resultList;\n    }\n\n    let indexOfSelector: number = html.indexOf(selector, 0);\n\n    // eslint-disable-next-line no-loops/no-loops\n    while (indexOfSelector !== -1) {\n        const equalSymbolsMatch: Array<string> | null = html.slice(indexOfSelector).match(equal);\n\n        if (!equalSymbolsMatch) {\n            return [];\n        }\n\n        const [equalSymbolLine] = equalSymbolsMatch;\n        const equalSymbolLineLength = equalSymbolLine.length;\n\n        if (equalSymbolLineLength === selectorLength) {\n            resultList.push(indexOfSelector);\n        }\n\n        indexOfSelector = html.indexOf(selector, indexOfSelector + equalSymbolLineLength);\n    }\n\n    if (resultList.length % 2 === 1) {\n        return resultList.slice(0, -1);\n    }\n\n    return resultList;\n}\n\nfunction addPairTag(html: string, pairTagSelector: PairTagSelectorType): string {\n    const {selector, openTag, closeTag} = pairTagSelector;\n    const selectorLength = selector.length;\n\n    if (!html.includes(selector)) {\n        return html;\n    }\n\n    const tagPairIndexList = getTagIndexList(html);\n\n    let selectorIndexList: Array<number> = getSelectorIndexList(html, pairTagSelector);\n\n    // remove indexes into tags, f.e. - <a href=\"http://ex__am__ple.com\">text</a>\n    selectorIndexList = selectorIndexList.filter((selectorIndex: number): boolean => {\n        // eslint-disable-next-line no-loops/no-loops\n        for (const tagPairIndex of tagPairIndexList) {\n            const selectorStart = selectorIndex;\n            const selectorEnd = selectorIndex + selectorLength - 1;\n\n            if (harArrayOverflow(tagPairIndex, [selectorStart, selectorEnd])) {\n                return false;\n            }\n        }\n\n        return true;\n    });\n\n    const selectorIndexListLength = selectorIndexList.length;\n\n    if (selectorIndexListLength === 0) {\n        return html;\n    }\n\n    let resultTagPairedList: string = html.slice(0, selectorIndexList[0]);\n\n    // eslint-disable-next-line no-loops/no-loops\n    for (let selectorIndexInList = 1; selectorIndexInList <= selectorIndexListLength; selectorIndexInList += 1) {\n        const selectorIndex = selectorIndexList[selectorIndexInList];\n        const htmlPart = html.slice(selectorIndexList[selectorIndexInList - 1] + selectorLength, selectorIndex);\n\n        resultTagPairedList += selectorIndexInList % 2 === 1 ? openTag + htmlPart + closeTag : htmlPart;\n    }\n\n    return resultTagPairedList;\n}\n\nexport function makePairTag(html: string): string {\n    let result = html;\n\n    // eslint-disable-next-line no-loops/no-loops\n    for (const pairTagSelector of pairTagSelectorList) {\n        result = addPairTag(result, pairTagSelector);\n    }\n\n    return result;\n}\n","import {DocumentMetaType, LineDataType, OlAttributeType, SelectorType} from '../parser/parser-type';\nimport {olNumericType, oLParseDataList} from '../parser/parser-selector';\nimport {hasEmailSymbol, hasStringNonEmptySymbols} from '../parser/util/is';\nimport {makeFootnoteSuper} from '../parser/footnote/footnote';\nimport {mailPrefix} from '../markdown-const';\n\nimport {breakLineTag, emptyString, space} from './render-const';\nimport {makeLinkFromText, makeMailFromText} from './render-link';\nimport {makePairTag} from './render-pair-tag';\n\nexport const breakLineRegExp = /\\s*?\\\\$/;\n\nexport function addBreakLine(line: string): string {\n    return line.replace(breakLineRegExp, '<br/>');\n}\n\nexport function removeEndBreakLine(line: string): string {\n    return line.replace(breakLineRegExp, emptyString);\n}\n\nexport function getHasEndBreakLine(lineContent: string, useLineBreak: boolean): boolean {\n    return useLineBreak || breakLineRegExp.test(lineContent);\n}\n\nfunction imageReplacer(matchedString: string, alt: unknown, src: string, title: unknown): string {\n    const titleAndOtherAttrValue = hasStringNonEmptySymbols(title) ? ' title=\"' + title + '\"' : '';\n    const altAttrValue = hasStringNonEmptySymbols(alt) ? ' alt=\"' + alt + '\"' : '';\n\n    return `<img loading=\"lazy\" src=\"${src}\"${altAttrValue}${titleAndOtherAttrValue}/>`;\n}\n\nfunction imageReplacerVariable(\n    matchedString: string,\n    alt: unknown,\n    srcVariable: string,\n    documentMeta: DocumentMetaType\n): string {\n    const altAttrValue = hasStringNonEmptySymbols(alt) ? ' alt=\"' + alt + '\"' : '';\n    const {variable} = documentMeta;\n\n    if (srcVariable in variable) {\n        return `<img loading=\"lazy\" src=\"${variable[srcVariable].value}\"${altAttrValue}/>`;\n    }\n\n    return `<img loading=\"lazy\" src=\"${srcVariable}\"${altAttrValue}/>`;\n}\n\nconst findImageRegExpGlobal = /!\\[([\\S\\s]*?)]\\((\\S+?)(?:\\s+\"([\\S\\s]+?)\")?\\)/g;\nconst findImageVariableRegExpGlobal = /!\\[([\\S\\s]*?)]\\[([\\S\\s]+?)]/g;\n\nexport function makeImage(html: string, documentMeta: DocumentMetaType): string {\n    return (\n        html\n            // eslint-disable-next-line unicorn/prefer-string-replace-all\n            .replace(findImageRegExpGlobal, imageReplacer)\n            // eslint-disable-next-line unicorn/prefer-string-replace-all\n            .replace(\n                findImageVariableRegExpGlobal,\n                (matchedString: string, alt: unknown, srcVariable: string): string => {\n                    return imageReplacerVariable(matchedString, alt, srcVariable, documentMeta);\n                }\n            )\n    );\n}\n\nconst findCheckboxCheckedRegExoGlobal = /\\[x]/gi;\nconst findCheckboxUncheckedRegExoGlobal = /\\[\\s]/g;\n\nexport function makeCheckbox(html: string): string {\n    return (\n        html\n            // eslint-disable-next-line unicorn/prefer-string-replace-all\n            .replace(findCheckboxCheckedRegExoGlobal, '<input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\"/>')\n            // eslint-disable-next-line unicorn/prefer-string-replace-all\n            .replace(findCheckboxUncheckedRegExoGlobal, '<input type=\"checkbox\" disabled=\"disabled\"/>')\n    );\n}\n\nexport function isImageListOnly(lineContent: string): boolean {\n    // eslint-disable-next-line unicorn/prefer-string-replace-all\n    return lineContent.replace(findImageRegExpGlobal, '').trim() === emptyString;\n}\n\nconst findMailRegExpGlobal = /\\[([\\S\\s]*?)]\\((\\S+?)(?:\\s+\"([\\S\\s]+?)\")?(?:\\s+\"([\\S\\s]+?)\")?\\)/g;\nconst findLinkRegExpGlobal = /\\[([\\S\\s]*?)]\\((\\S+?)(?:\\s+\"([\\S\\s]+?)\")?\\)/g;\nconst findLinkVariableRegExpGlobal = /\\[([\\S\\s]*?)]\\[([\\S\\s]+?)]/g;\n\nfunction mailReplacer(matchedString: string, linkText: string, href: string, title: unknown, subject: unknown): string {\n    const titleAttrValue = hasStringNonEmptySymbols(title) ? ' title=\"' + title + '\"' : '';\n    const subjectValue = hasStringNonEmptySymbols(subject) ? '?subject=' + subject : '';\n    const text = linkText.length > 0 ? linkText : href;\n\n    if (hasEmailSymbol(matchedString)) {\n        return `<a href=\"${mailPrefix}${href}${subjectValue}\"${titleAttrValue}>${text}</a>`;\n    }\n\n    // leave it for link\n    return matchedString;\n}\n\nfunction linkReplacer(matchedString: string, linkText: string, href: string, title: unknown): string {\n    const titleAttrValue = hasStringNonEmptySymbols(title) ? ' title=\"' + title + '\"' : '';\n    const text = linkText.length > 0 ? linkText : href;\n\n    return `<a href=\"${href}\"${titleAttrValue}>${text}</a>`;\n}\n\nfunction getMailToPrefix(href: string): string {\n    return hasEmailSymbol(href) ? mailPrefix : '';\n}\n\nfunction linkReplacerVariable(\n    matchedString: string,\n    linkText: string,\n    hrefVariable: string,\n    documentMeta: DocumentMetaType\n): string {\n    const {variable} = documentMeta;\n\n    if (hrefVariable in variable) {\n        const href = variable[hrefVariable].value;\n        const textVariable = linkText.length > 0 ? linkText : href;\n\n        return `<a href=\"${getMailToPrefix(href)}${href}\">${textVariable}</a>`;\n    }\n\n    const text = linkText.length > 0 ? linkText : hrefVariable;\n\n    return `<a href=\"${getMailToPrefix(hrefVariable)}${hrefVariable}\">${text}</a>`;\n}\n\nfunction defineVariables(html: string, documentMeta: DocumentMetaType): string {\n    // eslint-disable-next-line unicorn/prefer-string-replace-all\n    return html.replace(\n        findLinkVariableRegExpGlobal,\n        (matchedString: string, linkText: string, hrefVariable: string): string => {\n            return linkReplacerVariable(matchedString, linkText, hrefVariable, documentMeta);\n        }\n    );\n}\n\nexport function makeMail(html: string): string {\n    // eslint-disable-next-line unicorn/prefer-string-replace-all\n    return html.replace(findMailRegExpGlobal, mailReplacer);\n}\n\nexport function makeLink(html: string): string {\n    // eslint-disable-next-line unicorn/prefer-string-replace-all\n    return html.replace(findLinkRegExpGlobal, linkReplacer);\n}\n\nexport function getOlTypeBySelector(dataLineSelector: SelectorType): OlAttributeType {\n    // eslint-disable-next-line no-loops/no-loops\n    for (const oLParseData of oLParseDataList) {\n        const {selector, olAttributeType} = oLParseData;\n\n        if (dataLineSelector === selector) {\n            return olAttributeType;\n        }\n    }\n\n    // console.error('Can not detect ol type by selector', dataLineSelector);\n\n    return olNumericType;\n}\n\nexport function getOlStart(trimmedLine: string): string {\n    const dotIndex = trimmedLine.indexOf('.');\n\n    return trimmedLine.slice(0, dotIndex);\n}\n\n// eslint-disable-next-line complexity, max-statements\nexport function renderAdditionalLineList(lineData: LineDataType): string {\n    const {additionalLineList, config} = lineData;\n    const {lineContent} = lineData;\n    const {useLineBreak} = config;\n\n    if (additionalLineList.length === 0) {\n        return emptyString;\n    }\n\n    const hasParentEndBreakLine = getHasEndBreakLine(lineContent, useLineBreak);\n    const prefix = hasParentEndBreakLine ? breakLineTag : space;\n    const additionalLineListLength = additionalLineList.length;\n    const additionalLineLastIndex = additionalLineListLength - 1;\n    const lineResult: Array<string> = Array.from<string>({length: additionalLineListLength}).fill('');\n\n    // eslint-disable-next-line no-loops/no-loops\n    for (let lineIndex = 0; lineIndex < additionalLineListLength; lineIndex += 1) {\n        const additionalLine = additionalLineList[lineIndex];\n        const hasBreakLine = getHasEndBreakLine(additionalLine, useLineBreak);\n\n        if (hasBreakLine) {\n            const additionalLineWithoutBreakLine = additionalLine.replace(breakLineRegExp, emptyString);\n\n            lineResult[lineIndex] =\n                lineIndex === additionalLineLastIndex\n                    ? additionalLineWithoutBreakLine\n                    : additionalLineWithoutBreakLine + breakLineTag;\n        } else {\n            // eslint-disable-next-line no-lonely-if\n            lineResult[lineIndex] = lineIndex === additionalLineLastIndex ? additionalLine : additionalLine + space;\n        }\n    }\n\n    return prefix + lineResult.join(emptyString);\n}\n\nexport function renderInlineHtml(html: string, documentMeta: DocumentMetaType): string {\n    const {config} = documentMeta;\n    const {parseLink} = config;\n\n    let fullLineContent = makeFootnoteSuper(html, documentMeta);\n\n    fullLineContent = makeImage(fullLineContent, documentMeta);\n\n    fullLineContent = makeMail(fullLineContent);\n    if (parseLink) {\n        fullLineContent = makeMailFromText(fullLineContent);\n    }\n\n    fullLineContent = makeLink(fullLineContent);\n    if (parseLink) {\n        fullLineContent = makeLinkFromText(fullLineContent);\n    }\n\n    fullLineContent = defineVariables(fullLineContent, documentMeta);\n\n    fullLineContent = makeCheckbox(fullLineContent);\n    return makePairTag(fullLineContent);\n}\n","import {CellAlignType, CellTagNameType} from './render-table-type';\n\nexport const cellAlignTypeMap: Record<string, CellAlignType> = {\n    center: 'center',\n    'default': 'left',\n    left: 'left',\n    right: 'right',\n};\n\nexport const cellTagNameTypeMap: Record<string, CellTagNameType> = {\n    tdCell: 'td',\n    thCell: 'th',\n};\n","import {DocumentMetaType, SelectorType} from '../../parser/parser-type';\nimport {filterEmptyString} from '../../parser/util/string';\nimport {emptyString} from '../render-const';\nimport {renderInlineHtml} from '../render-helper';\n\nimport {cellAlignTypeMap} from './render-table-const';\nimport {CellAlignType} from './render-table-type';\n\nexport function renderTableCellContent(line: string, documentMeta: DocumentMetaType): string {\n    return renderInlineHtml(line, documentMeta).trim();\n}\n\nexport function isTableDivideLine(line: string): boolean {\n    // eslint-disable-next-line unicorn/prefer-string-replace-all\n    return line.replace(/[\\s:|-]/g, '') === emptyString;\n}\n\nexport function lineToAlign(divideRaw: string): CellAlignType {\n    const alignMark = ':';\n    const divide: string = divideRaw.trim();\n    // eslint-disable-next-line unicorn/prefer-spread\n    const divideCharList: Array<string> = divide.split('');\n    const [firstChar] = divideCharList;\n    // eslint-disable-next-line unicorn/prefer-at\n    const lastChar = divide[divide.length - 1];\n\n    if (firstChar === lastChar && firstChar === alignMark) {\n        return cellAlignTypeMap.center;\n    }\n\n    if (lastChar === alignMark) {\n        return cellAlignTypeMap.right;\n    }\n\n    return cellAlignTypeMap.left;\n}\n\nexport function getAlignList(selector: SelectorType, divideLine: string): Array<CellAlignType> {\n    return divideLine.split(selector).filter(filterEmptyString).map<CellAlignType>(lineToAlign);\n}\n","import {DocumentMetaType, LineDataType} from '../../parser/parser-type';\nimport {filterEmptyString} from '../../parser/util/string';\nimport {emptyString} from '../render-const';\n\nimport {getAlignList, isTableDivideLine, renderTableCellContent} from './render-table-helper';\nimport {cellAlignTypeMap, cellTagNameTypeMap} from './render-table-const';\nimport {CellAlignType, CellTagNameType} from './render-table-type';\n\nfunction renderTableRow(\n    lineData: LineDataType,\n    line: string,\n    alignList: Array<CellAlignType>,\n    cellName: CellTagNameType,\n    documentMeta: DocumentMetaType\n): string {\n    const {selector} = lineData;\n\n    return line\n        .split(selector)\n        .filter(filterEmptyString)\n        .map((cellContent: string, cellIndex: number): string => {\n            const align = alignList[cellIndex] || cellAlignTypeMap.default;\n\n            return `<${cellName} align=\"${align}\">${renderTableCellContent(cellContent, documentMeta)}</${cellName}>`;\n        })\n        .join(emptyString);\n}\n\nfunction renderTableRowList(\n    lineData: LineDataType,\n    lineList: Array<string>,\n    alignList: Array<CellAlignType>,\n    cellName: CellTagNameType,\n    documentMeta: DocumentMetaType\n): string {\n    return lineList\n        .map((line: string): string => `<tr>${renderTableRow(lineData, line, alignList, cellName, documentMeta)}</tr>`)\n        .join(emptyString);\n}\n\nexport function renderTable(lineData: LineDataType, documentMeta: DocumentMetaType): string {\n    const {selector, additionalLineList, line} = lineData;\n\n    const lineList = [line, ...additionalLineList];\n\n    const dividerLine = lineList.find(isTableDivideLine);\n\n    if (!dividerLine) {\n        const bodyOnlyContent = renderTableRowList(lineData, lineList, [], cellTagNameTypeMap.tdCell, documentMeta);\n\n        return `<table><tbody>${bodyOnlyContent}</tbody></table>`;\n    }\n\n    const dividerLineIndex = lineList.indexOf(dividerLine);\n    const headLineList = lineList.slice(0, dividerLineIndex);\n    const bodyLineList = lineList.slice(dividerLineIndex + 1);\n    const alignList = getAlignList(selector, dividerLine);\n\n    const headContent = renderTableRowList(lineData, headLineList, alignList, cellTagNameTypeMap.thCell, documentMeta);\n    const bodyContent = renderTableRowList(lineData, bodyLineList, alignList, cellTagNameTypeMap.tdCell, documentMeta);\n\n    return `<table><thead>${headContent}</thead><tbody>${bodyContent}</tbody></table>`;\n}\n","import {\n    getIsBlockquote,\n    getIsCode,\n    getIsHeader,\n    getIsLine,\n    getIsOlItem,\n    getIsStartWithHtml,\n    getIsTable,\n    getIsUlItem,\n} from '../parser/util/is-tag';\nimport {DocumentMetaType, LineDataType} from '../parser/parser-type';\n\nimport {getIsEdgeLine} from '../parser/util/navigation';\nimport {getIsFootnoteDescription} from '../parser/footnote/footnote-helper';\n// import {makeFootnoteSuper} from '../parser/footnote/footnote';\n\nimport {\n    addBreakLine,\n    getOlStart,\n    getOlTypeBySelector,\n    isImageListOnly,\n    removeEndBreakLine,\n    renderAdditionalLineList,\n    renderInlineHtml,\n} from './render-helper';\nimport {emptyString} from './render-const';\nimport {renderTable} from './render-table/render-table';\n\nexport function renderChildList(lineDataList: Array<LineDataType>, documentMeta: DocumentMetaType): string {\n    return lineDataList\n        .map((lineData: LineDataType, lineDataIndex: number): string => {\n            // eslint-disable-next-line no-use-before-define, @typescript-eslint/no-use-before-define\n            return renderLineData(lineData, lineDataIndex, lineDataList, documentMeta);\n        })\n        .map(addBreakLine)\n        .join(emptyString);\n}\n\n// eslint-disable-next-line complexity, sonarjs/cognitive-complexity, max-statements\nexport function renderLineData(\n    lineData: LineDataType,\n    lineDataIndex: number,\n    lineDataList: Array<LineDataType>,\n    documentMeta: DocumentMetaType\n): string {\n    const {selector, childList, lineContent, trimmedLine, additionalLineList, config} = lineData;\n    const {codeHighlight} = config;\n    const additionLineListRender = renderAdditionalLineList(lineData);\n    const childListRender = renderChildList(childList, documentMeta);\n\n    let fullLineContent = removeEndBreakLine(lineContent) + additionLineListRender;\n\n    fullLineContent = renderInlineHtml(fullLineContent, documentMeta);\n\n    fullLineContent += childListRender;\n\n    if (getIsFootnoteDescription(lineContent)) {\n        return '';\n    }\n\n    if (getIsLine(lineData)) {\n        return '<hr/>';\n    }\n\n    if (getIsTable(lineData)) {\n        return renderTable(lineData, documentMeta);\n    }\n\n    if (getIsCode(lineData)) {\n        const codeText = codeHighlight(lineContent, additionalLineList.join('\\n'));\n\n        return lineContent ? `<code data-lang=\"${lineContent}\">${codeText}</code>` : `<code>${codeText}</code>`;\n    }\n\n    if (lineContent === emptyString && childList.length === 0) {\n        return emptyString;\n    }\n\n    if (getIsHeader(lineData)) {\n        const headerTag = selector.length - 1;\n\n        return `<h${headerTag}>${fullLineContent}</h${headerTag}>`;\n    }\n\n    if (getIsBlockquote(lineData)) {\n        return `<blockquote>${fullLineContent}</blockquote>`;\n    }\n\n    if (getIsUlItem(lineData)) {\n        const isFirstItem = getIsEdgeLine(lineData, lineDataList, -1);\n        const isLastItem = getIsEdgeLine(lineData, lineDataList, 1);\n        const prefix = isFirstItem ? '<ul>' : '';\n        const postfix = isLastItem ? '</ul>' : '';\n\n        return `${prefix}<li>${fullLineContent}</li>${postfix}`;\n    }\n\n    if (getIsOlItem(lineData)) {\n        const isFirstItem = getIsEdgeLine(lineData, lineDataList, -1);\n        const isLastItem = getIsEdgeLine(lineData, lineDataList, 1);\n        const {selector: lineDataSelector} = lineData;\n        const prefix = isFirstItem\n            ? `<ol type=\"${getOlTypeBySelector(lineDataSelector)}\" start=\"${getOlStart(trimmedLine)}\">`\n            : '';\n        const postfix = isLastItem ? '</ol>' : '';\n\n        return `${prefix}<li>${fullLineContent}</li>${postfix}`;\n    }\n\n    if (lineContent === emptyString || getIsStartWithHtml(lineData) || isImageListOnly(lineContent)) {\n        return fullLineContent;\n    }\n\n    return `<p>${fullLineContent}</p>`;\n}\n","import {MarkdownConfigShallowType, MarkdownConfigType} from '../library';\n\nimport {parseLine} from './parser/parse-line';\nimport {DocumentMetaType, FootnoteType, LineDataType} from './parser/parser-type';\nimport {emptyString} from './render/render-const';\nimport {renderChildList} from './render/render';\nimport {defaultMarkdownConfig} from './markdown-const';\nimport {getMdFootnoteContent} from './parser/footnote/footnote-helper';\nimport {getFullWrapperClassName} from './helper';\n\nexport function markdown(mdInput: string, config: MarkdownConfigShallowType = defaultMarkdownConfig): string {\n    const markdownConfig: MarkdownConfigType = {\n        ...defaultMarkdownConfig,\n        ...config,\n    };\n\n    const {useWrapper} = markdownConfig;\n\n    const markdownFootnoteConfig: MarkdownConfigType = {\n        ...defaultMarkdownConfig,\n        ...config,\n        useWrapper: false,\n    };\n\n    const mainParent: LineDataType = {\n        additionalLineList: [],\n        childList: [],\n        config: markdownConfig,\n        line: emptyString,\n        lineContent: '',\n        lineIndex: -1,\n        selector: emptyString,\n        spaceCount: -1,\n        trimmedLine: '',\n        // isFirst: true,\n        // isLast: true,\n    };\n    const structuredLineDataList: Array<LineDataType> = [mainParent];\n    const savedLineDataList: Array<LineDataType> = [mainParent];\n    const documentMeta: DocumentMetaType = {\n        codeLineData: null,\n        config: markdownConfig,\n        footnoteList: [],\n        tableLineData: null,\n        variable: {},\n    };\n\n    mdInput.split('\\n').forEach((line: string, lineIndex: number, allLineList: Array<string>) => {\n        parseLine(line, lineIndex, allLineList, structuredLineDataList, savedLineDataList, documentMeta);\n    });\n\n    const mainContent = renderChildList(structuredLineDataList, documentMeta);\n\n    const footnoteDescriptionList: Array<string> = documentMeta.footnoteList.map((footnote: FootnoteType): string => {\n        const {id} = footnote;\n        const mdFootnoteContent = getMdFootnoteContent(footnote);\n\n        return `<li id=\"${id}\">${markdown(mdFootnoteContent, markdownFootnoteConfig)}</li>`;\n    });\n\n    const footnoteDescriptionHtml: string =\n        footnoteDescriptionList.length === 0\n            ? ''\n            : ['<hr/>', '<ol type=\"1\">', ...footnoteDescriptionList, '</ol>'].join('');\n\n    const fullContent = [mainContent, footnoteDescriptionHtml].join('');\n\n    if (!useWrapper) {\n        return fullContent;\n    }\n\n    const fullWrapperClassName: string = getFullWrapperClassName(markdownConfig);\n\n    return `<div class=\"${fullWrapperClassName}\">${fullContent}</div>`;\n}\n","import {emptyString} from '../render/render-const';\n\nimport {cleanLine, getIsAllSymbolsEqual} from './util/string';\nimport {getParent} from './util/navigation';\nimport {DocumentMetaType, LineDataType, ShortLineInfoType} from './parser-type';\nimport {oLParseDataList, selectorCodeList, selectorLineList, selectorList, selectorTableList} from './parser-selector';\nimport {addLineData, fromToFootnoteList, getFootnoteList} from './footnote/footnote';\nimport {getIsFootnoteDescription} from './footnote/footnote-helper';\nimport {getVariableData} from './util/variable';\n\n// eslint-disable-next-line complexity\nfunction getShortInfo(trimmedLine: string): ShortLineInfoType {\n    // eslint-disable-next-line no-loops/no-loops\n    for (const selector of selectorList) {\n        if (trimmedLine.startsWith(selector)) {\n            return {\n                lineContent: cleanLine(trimmedLine.replace(selector, emptyString)),\n                selector,\n            };\n        }\n    }\n\n    // eslint-disable-next-line no-loops/no-loops\n    for (const lineSelector of selectorLineList) {\n        if (trimmedLine.startsWith(lineSelector) && getIsAllSymbolsEqual(trimmedLine)) {\n            return {\n                lineContent: emptyString,\n                selector: lineSelector,\n            };\n        }\n    }\n\n    // eslint-disable-next-line no-loops/no-loops\n    for (const oLParseData of oLParseDataList) {\n        const {selector, regExpSearchSelector} = oLParseData;\n\n        if (trimmedLine.search(regExpSearchSelector) === 0) {\n            return {\n                lineContent: cleanLine(trimmedLine.replace(regExpSearchSelector, emptyString)),\n                selector,\n            };\n        }\n    }\n\n    return {\n        lineContent: cleanLine(trimmedLine),\n        selector: emptyString,\n    };\n}\n\n// eslint-disable-next-line complexity, max-params, max-statements, sonarjs/cognitive-complexity\nexport function parseLine(\n    line: string,\n    lineIndex: number,\n    allLineList: Array<string>,\n    structuredLineDataList: Array<LineDataType>,\n    savedLineDataList: Array<LineDataType>,\n    documentMeta: DocumentMetaType\n): boolean {\n    const trimmedLine = line.trim();\n    const isEmptyString = trimmedLine === emptyString;\n    const rawSpaceCount = isEmptyString\n        ? // eslint-disable-next-line unicorn/prefer-at\n          savedLineDataList[savedLineDataList.length - 1].spaceCount\n        : line.search(/\\S/);\n    const spaceCount = Math.max(0, rawSpaceCount);\n    const defaultSelectorData: ShortLineInfoType = {\n        lineContent: emptyString,\n        selector: emptyString,\n    };\n\n    const {selector, lineContent} = isEmptyString ? defaultSelectorData : getShortInfo(trimmedLine);\n\n    const lineData: LineDataType = {\n        additionalLineList: [],\n        childList: [],\n        config: documentMeta.config,\n        line: isEmptyString ? emptyString : line,\n        lineContent,\n        lineIndex,\n        selector,\n        spaceCount,\n        trimmedLine,\n    };\n\n    if (selectorCodeList.includes(selector)) {\n        if (documentMeta.codeLineData && lineContent === emptyString) {\n            // eslint-disable-next-line no-param-reassign\n            documentMeta.codeLineData = null;\n            return true;\n        }\n        // eslint-disable-next-line no-param-reassign\n        documentMeta.codeLineData = lineData;\n    }\n\n    const {codeLineData} = documentMeta;\n\n    if (codeLineData && codeLineData !== lineData) {\n        codeLineData.additionalLineList.push(lineData.line);\n        return true;\n    }\n\n    const newFootnoteList = getFootnoteList(lineContent);\n    const {footnoteList, tableLineData, variable} = documentMeta;\n\n    fromToFootnoteList(newFootnoteList, footnoteList);\n\n    if (selectorTableList.includes(selector)) {\n        if (tableLineData) {\n            // append new line in current block\n            // eslint-disable-next-line no-param-reassign\n            tableLineData.additionalLineList.push(lineData.line);\n            return true;\n        }\n        // create new block\n        // eslint-disable-next-line no-param-reassign\n        documentMeta.tableLineData = lineData;\n    } else {\n        // close table block\n        // eslint-disable-next-line no-param-reassign\n        documentMeta.tableLineData = null;\n    }\n\n    const variableData = getVariableData(lineContent);\n\n    if (lineData.selector === emptyString && lineContent.length > 0) {\n        const prevItemIndex = savedLineDataList.length - 1;\n        const prevItem = savedLineDataList[prevItemIndex];\n        const isTable = selectorTableList.includes(prevItem.selector);\n\n        if (variableData) {\n            // eslint-disable-next-line no-param-reassign\n            variable[variableData.key] = variableData;\n        }\n\n        if (prevItem && prevItem.lineContent.length > 0 && !isTable && !variableData) {\n            prevItem.additionalLineList.push(lineContent);\n            return true;\n        }\n    }\n\n    const parentLineData = getParent(lineData, savedLineDataList);\n\n    if (!parentLineData) {\n        // console.error('Parent not found');\n        return false;\n    }\n\n    if (variableData) {\n        return true;\n    }\n\n    parentLineData.childList.push(lineData);\n    savedLineDataList.push(lineData);\n\n    if (getIsFootnoteDescription(lineContent)) {\n        addLineData(lineData, footnoteList);\n    }\n\n    return true;\n}\n","import {VariableType} from '../parser-type';\n\n/*\nexport function getIsVariableLine(lineContent: string): boolean {\n    return /\\[[^^][\\S\\s]+?]:/.test(lineContent);\n}\n*/\n\nexport function getVariableData(lineContent: string): VariableType | null {\n    const matchData = lineContent.match(/\\[([^^][\\S\\s]+?)]:\\s+?\\S/);\n\n    if (!matchData) {\n        return null;\n    }\n\n    // eslint-disable-next-line prefer-destructuring\n    const key = matchData[1];\n\n    const value = lineContent.slice(lineContent.indexOf(']:') + 3).trim();\n\n    return {\n        key,\n        value,\n    };\n}\n","import {MarkdownConfigType} from '../library';\n\nimport {themeClassNameMap, defaultMarkdownConfig} from './markdown-const';\n\nexport function getFullWrapperClassName(markdownConfig: MarkdownConfigType): string {\n    const {wrapperClassName: wrapperClassNameConfig, themeName} = markdownConfig;\n    const {wrapperClassName: wrapperClassNameDefault} = defaultMarkdownConfig;\n\n    const wrapperClassName: string =\n        wrapperClassNameConfig === wrapperClassNameDefault\n            ? wrapperClassNameDefault\n            : `${wrapperClassNameDefault} ${wrapperClassNameConfig}`;\n\n    const themeClassName: string = themeClassNameMap[themeName];\n\n    return `${wrapperClassName} ${themeClassName}`;\n}\n","import './src/markdown.scss';\n\nimport {defaultMarkdownConfig, ThemeNameEnum} from './src/markdown-const';\n\n// eslint-disable-next-line import/no-default-export\nexport {markdown, markdown as default} from './src/markdown';\nexport {defaultMarkdownConfig, ThemeNameEnum} from './src/markdown-const';\n\nexport const classNameMdProThemeDark = 'md-pro-theme-dark';\nexport const classNameMdProThemeLight = 'md-pro-theme-light';\nexport const classNameMdPro: string = defaultMarkdownConfig.wrapperClassName;\n\nexport type MarkdownConfigType = Readonly<{\n    // code highlight\n    codeHighlight: (langName: string, code: string) => string;\n    // https://exmaple.com -> <a href=\"https://exmaple.com\">https://exmaple.com</a>\n    parseLink: boolean;\n    // themeName: light | dark | auto (auto - will use current system theme i.e. light or dark)\n    // needed class will be added to the wrapper div\n    themeName: ThemeNameEnum;\n    // make \\n => <br/>\n    useLineBreak: boolean;\n    // use wrapper <div class=\"md-pro\">...</div>\n    useWrapper: boolean;\n    // additional css class for wrapper\n    wrapperClassName: string;\n}>;\n\nexport type MarkdownConfigShallowType = Readonly<Partial<MarkdownConfigType>>;\n"],"names":["ThemeNameEnum","__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","defaultMarkdownConfig","codeHighlight","langName","code","parseLink","themeName","auto","useLineBreak","useWrapper","wrapperClassName","themeClassNameMap","dark","light","mailPrefix","emptyString","space","breakLineTag","filterEmptyString","line","trim","cleanLine","replace","getIsAllSymbolsEqual","charList","split","firstSymbol","char","searchSiblingItem","lineData","lineDataList","direction","index","indexOf","siblingIndex","siblingItem","trimmedLine","getIsEdgeLine","selector","foundItem","selectorHeaderList","selectorBlockquoteList","selectorLineList","selectorTableList","selectorCodeList","selectorULItemList","olNumericType","oLParseDataList","olAttributeType","regExpSearchSelector","selectorList","sort","itemA","itemB","length","pairTagSelectorList","closeTag","equal","openTag","footnoteTypeMap","inline","findFootnoteMarkGlobalRegExp","getIsFootnoteDescription","lineContent","test","getFootnoteById","id","list","find","footnote","getFootnoteInlineLineContent","match","slice","getFootnoteMarkId","toLowerCase","matchToFootnote","inlineLineContent","descriptionLineData","type","htmlPairTag","htmlSingleTag","hasStringNonEmptySymbols","hasEmailSymbol","includes","harArrayOverflow","arrayA","arrayB","startA","endA","startB","endB","harArrayListOverflow","pairNumberArray","arrayList","arrayInList","getMatchIndexList","html","regExp","resultList","matchList","currentIndex","matchedString","start","end","push","tagSelectorRegExpGlobal","getTagIndexList","linkSelectorRegExpGlobal","linkTextRegExpGlobal","mailTextRegExpGlobal","linkReplacer","replacer","hrefPrefix","linkPairIndexList","getLinkIndexList","tagIndexList","brackets1","offset","rawLinkIndexArray","addPairTag","pairTagSelector","selectorLength","tagPairIndexList","selectorIndexList","indexOfSelector","equalSymbolsMatch","equalSymbolLine","equalSymbolLineLength","getSelectorIndexList","filter","selectorIndex","tagPairIndex","selectorIndexListLength","resultTagPairedList","selectorIndexInList","htmlPart","breakLineRegExp","addBreakLine","getHasEndBreakLine","imageReplacer","alt","src","title","titleAndOtherAttrValue","findImageRegExpGlobal","findImageVariableRegExpGlobal","findCheckboxCheckedRegExoGlobal","findCheckboxUncheckedRegExoGlobal","findMailRegExpGlobal","findLinkRegExpGlobal","findLinkVariableRegExpGlobal","mailReplacer","linkText","href","subject","titleAttrValue","subjectValue","text","getMailToPrefix","renderInlineHtml","documentMeta","config","fullLineContent","firstLetter","footnoteList","makeFootnoteSuper","srcVariable","altAttrValue","variable","imageReplacerVariable","makeImage","makeMail","makeMailFromText","makeLink","makeLinkFromText","hrefVariable","textVariable","linkReplacerVariable","defineVariables","makeCheckbox","result","makePairTag","cellAlignTypeMap","center","left","right","cellTagNameTypeMap","tdCell","thCell","isTableDivideLine","lineToAlign","divideRaw","divide","divideCharList","firstChar","lastChar","renderTableRowList","lineList","alignList","cellName","map","cellContent","cellIndex","align","renderTableCellContent","join","renderTableRow","renderChildList","lineDataIndex","childList","additionalLineList","additionLineListRender","prefix","additionalLineListLength","additionalLineLastIndex","lineResult","Array","from","fill","lineIndex","additionalLine","additionalLineWithoutBreakLine","renderAdditionalLineList","childListRender","getIsLine","getIsTable","dividerLine","dividerLineIndex","headLineList","bodyLineList","divideLine","getAlignList","renderTable","getIsCode","codeText","getIsHeader","headerTag","getIsBlockquote","getIsUlItem","oLParseData","getIsOlItem","isFirstItem","isLastItem","lineDataSelector","dataLineSelector","getOlTypeBySelector","dotIndex","getOlStart","search","getIsStartWithHtml","isImageListOnly","renderLineData","mdInput","markdownConfig","markdownFootnoteConfig","mainParent","spaceCount","structuredLineDataList","savedLineDataList","codeLineData","tableLineData","forEach","allLineList","isEmptyString","rawSpaceCount","Math","max","defaultSelectorData","startsWith","lineSelector","getShortInfo","newFootnoteList","matchedList","getFootnoteList","fromList","toList","fromItem","candidateToExtend","toItem","fromToFootnoteList","variableData","matchData","getVariableData","prevItem","isTable","parentLineData","lineDataCandidate","getParent","rawMatchId","rawId","addLineData","parseLine","mainContent","footnoteDescriptionList","mdFootnoteContent","getMdFootnoteContent","fullContent","fullWrapperClassName","wrapperClassNameConfig","wrapperClassNameDefault","getFullWrapperClassName","classNameMdProThemeDark","classNameMdProThemeLight","classNameMdPro"],"sourceRoot":""}